name: solar system workflow

on:
    workflow_dispatch:
    push:
        branches:
          - main
          - 'feature/*'

env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
    unit-testing:
        name: unit testing
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
          MONGO_URI: 'mongodb://localhost:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password

        
        strategy:
            matrix:
                nodjs_version: [18, 20]
                operating_system: [ubuntu-latest]
                
        runs-on: ${{ matrix.operating_system }}
        steps:
        - name: unit testing
          uses: actions/checkout@v4

        - name: setup nodejs version -18
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.nodjs_version }}

        - name: cache npm dependencies
          uses: actions/cache@v3
          with:
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

        - name: install dependencies
          run: npm install

        - name: unit testing
          id: nodejs-unit-testing-step
          run: npm test

        - name: archive test results
        
          if: always() 
          uses: actions/upload-artifact@v3
          with:
            name: mocha-test-result
            path: test-results.xml

    code-coverage:
        name: code coverage
        container:
          image: node:18
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            options:
               --name mongo
            
        env:
          MONGO_URI: 'mongodb://mongo:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        runs-on: ubuntu-latest
        steps:
        - name: checkout repository
          uses: actions/checkout@v4

        # - name: setup nodejs version -18
        #   uses: actions/setup-node@v3
        #   with:
        #     node-version: 18

        - name: cache npm dependencies
          uses: actions/cache@v3
          with:
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

        - name: install dependencies
          run: npm install
        
        - name: check code coverage
          continue-on-error: true
          run: npm run coverage
        
        - name: archive test result
          uses: actions/upload-artifact@v3
          with:
            name: code-coverage-result
            path: coverage
            retention-days: 5

    reports-s3:
      needs: [ code-coverage, unit-testing ]
      name: aws s3 - upload reports
      runs-on: ubuntu-latest
      continue-on-error: true
      steps:
        - name: download mocha test artifact
          uses: actions/download-artifact@v3
          with:
            name: mocha-test-result

        - name: download code coverage artifact
          uses: actions/download-artifact@v3
          with:
            name: code-covarege-result

        - name: merge test files
          run: |
           ls -ltr
           mkdir reports-${{ github.sha }}
           mv cobertura-coverage.xml reports-${{ github.sha }}/
           mv test-results.xml reports-${{ github.sha }}/
           ls -ltr reports-${{ github.sha }}/

        - name: upload to aws s3
          uses: jakejarvis/s3-sync-action@master
          with:
           args: --acl public-read --follow-symlinks --delete
          env:
            AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: 'us-west-1'   # optional: defaults to us-east-1
            SOURCE_DIR: 'reports-${{ github.sha }}'
            DEST_DIR: 'reports-${{ github.sha }}'     # optional: defaults to entire repository


    docker:
        name: containerization
        needs: [unit-testing, code-coverage]
        runs-on: ubuntu-latest
        permissions: 
          packages: write
        steps:
        - name: checkout repo
          uses: actions/checkout@v4

        - name: dockerhub login
          uses: docker/login-action@v3
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }} 

        - name: ghcr login
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}  


        - name: docker build for testing
          uses: docker/build-push-action@v4
          with:
            context: .
            push: false
            tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }} 

        - name: docker image test
          run: |
            docker images
            docker run --name solar-system-app -d -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

            export IP=$(docker inspect -f '{{range .Networksettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP

            echo Testing image url using wget
            wget -q -O - 127.0.0.1:3000/live | grep live

        - name: container registry push
          uses: docker/build-push-action@v4
          with:
            context: .
            push: true
            tags: | 
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
              ghcr.io/nikosrepos/solar-system:${{ github.sha }}


    dev-deploy:
      if: contains(github.ref, 'feature/')
      needs: docker
      uses: ./.github/workflows/reuse-deployment.yml 
      secrets:
        k8s-kubeconfig: ${{ secrets.KUBCONFIG }}
        mongodb-password: ${{ secrets.MONGO_PASSWORD }}
      with:
        mongodb-uri: ${{ vars.MONGO_URI }}
        environment: development
        k8s-manifest-dir: kubernetes/development/
      
    dev-integration-test:
      if: contains(github.ref, 'feature/')
      name: dev integration testing
      needs: dev-deploy
      runs-on: ubuntu-latest
      steps:
      - name: test uri output using curl and jg
        env:
          URL: ${{ needs.dev-deploy.outputs.application-url }}
        run: |
          echo $URL
          echo "................................"
          curl https://$URL/live -s -k | jq -r .status | grep -i live

    prod-deploy:
      if: github.ref == 'refs/heads/main'
      needs: docker
      uses: ./.github/workflows/reuse-deployment.yml
      secrets:
        k8s-kubeconfig: ${{ secrets.KUBCONFIG }}secrets
        mongodb-password: ${{ secrets.MONGO_PASSWORD }}
      with:
        mongo-uri: ${{ vars.MONGO_URI }}
        environment: production
        k8s-manifest-dir: kubernetes/production/
    
    prod-integration-testing:
      name: prod integration testing
      if: github.ref == 'refs/heads/main'
      needs: prod-deploy
      runs-on: ubuntu-latest
      steps:
      - name: test url output using curl and jq
        env:
          URL: ${{ needs.prod-deploy.outputs.application-url }}
        run: |
          echo $URL
          echo "................................"
          curl https://$URL/live -s -k | jq -r .status | grep -i live
         

    

      



      










              


        

        

          


        
        